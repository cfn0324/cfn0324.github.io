<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>决策树和随机森林</title>
      <link href="/2024/04/05/Post12/"/>
      <url>/2024/04/05/Post12/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/04/05/Post12/1.jpg"></p><span id="more"></span><h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><p>将数据读入并存储为home_data</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error</span><br><span class="line">iowa_file_path=<span class="string">&#x27;C:/Users/cfn03/Downloads/train.csv&#x27;</span></span><br><span class="line">home_data = pd.read_csv(iowa_file_path)</span><br></pre></td></tr></table></figure><p>找出要预测的变量和特征变量并将对应的数据储存在 X , y 中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = home_data.SalePrice</span><br><span class="line">feature_columns = [<span class="string">&#x27;LotArea&#x27;</span>, <span class="string">&#x27;YearBuilt&#x27;</span>, <span class="string">&#x27;1stFlrSF&#x27;</span>, <span class="string">&#x27;2ndFlrSF&#x27;</span>, <span class="string">&#x27;FullBath&#x27;</span>, <span class="string">&#x27;BedroomAbvGr&#x27;</span>, <span class="string">&#x27;TotRmsAbvGrd&#x27;</span>]</span><br><span class="line">X = home_data[feature_columns]</span><br></pre></td></tr></table></figure><p>将 X 和 y 中的数据分为 train_X , val_X , train_y,val_y ,分别用来训练和测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_X,val_X,train_y,val_y = train_test_split(X,y)</span><br></pre></td></tr></table></figure><p>定义一个使用给定训练数据在决策树中训练并用模型的预测值与预测的真实值计算平均绝对差值的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_mae</span>(<span class="params">max_leaf_nodes,train_X,val_X,train_y,val_y</span>):</span><br><span class="line">    model=DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes)</span><br><span class="line">    model.fit(train_X,train_y)</span><br><span class="line">    mae=mean_absolute_error(val_y,model.predict(val_X))</span><br><span class="line">    <span class="keyword">return</span>(mae)</span><br></pre></td></tr></table></figure><p>使用循环不断改变决策树的深度，并根据平均绝对差值去找到最优的决策树模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">min_mae=-<span class="number">1</span></span><br><span class="line">best_tree_size=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">5000</span>,<span class="number">5</span>):</span><br><span class="line">    mae=get_mae(i,train_X,val_X,train_y,val_y)</span><br><span class="line">    <span class="keyword">if</span> min_mae==-<span class="number">1</span>:</span><br><span class="line">        min_mae=mae</span><br><span class="line">        best_tree_size=i</span><br><span class="line">    <span class="keyword">elif</span> min_mae&gt;mae:</span><br><span class="line">        min_mae=mae</span><br><span class="line">        best_tree_size=i</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(best_tree_size)</span><br><span class="line"><span class="built_in">print</span>(min_mae)</span><br></pre></td></tr></table></figure><pre><code>18025069.51918972927</code></pre><p>使用最优的决策树模型对全部数据进行拟合训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model=DecisionTreeRegressor(max_leaf_nodes=best_tree_size)</span><br><span class="line">model.fit(X,y)</span><br></pre></td></tr></table></figure><style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>DecisionTreeRegressor(max_leaf_nodes=180)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">DecisionTreeRegressor</label><div class="sk-toggleable__content"><pre>DecisionTreeRegressor(max_leaf_nodes=180)</pre></div></div></div></div></div><hr><h3 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h3><p>将数据读入并存储为home_data</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error</span><br><span class="line">file_path=<span class="string">&#x27;C:/Users/cfn03/Downloads/train.csv&#x27;</span></span><br><span class="line">home_data=pd.read_csv(file_path)</span><br></pre></td></tr></table></figure><p>找出要预测的变量和特征变量并将对应的数据储存在 X , y 中,并将 X 和 y 中的数据分为 train_X , val_X , train_y,val_y ,分别用来训练和测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y=home_data.SalePrice</span><br><span class="line">feature_columns=[<span class="string">&#x27;LotArea&#x27;</span>, <span class="string">&#x27;YearBuilt&#x27;</span>, <span class="string">&#x27;1stFlrSF&#x27;</span>, <span class="string">&#x27;2ndFlrSF&#x27;</span>, <span class="string">&#x27;FullBath&#x27;</span>, <span class="string">&#x27;BedroomAbvGr&#x27;</span>, <span class="string">&#x27;TotRmsAbvGrd&#x27;</span>]</span><br><span class="line">X=home_data[feature_columns]</span><br><span class="line">train_X,val_X,train_y,val_y=train_test_split(X,y)</span><br></pre></td></tr></table></figure><p>使用随机森林模型进行训练和预测，并计算平均绝对差值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model=RandomForestRegressor()</span><br><span class="line">model.fit(train_X,train_y)</span><br><span class="line">predict=model.predict(val_X)</span><br><span class="line"><span class="built_in">print</span>(mean_absolute_error(val_y,predict))</span><br></pre></td></tr></table></figure><pre><code>20153.79173855186</code></pre><p>使用全部数据对随机森林模型进行拟合训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model=RandomForestRegressor()</span><br><span class="line">model.fit(X,y)</span><br></pre></td></tr></table></figure><style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor()</pre></div></div></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小A的最短路 题解</title>
      <link href="/2024/03/17/Post11/"/>
      <url>/2024/03/17/Post11/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/03/17/Post11/1.jpg"></p><span id="more"></span><h1 id="小A的最短路"><a href="#小A的最短路" class="headerlink" title="小A的最短路"></a><a href="https://ac.nowcoder.com/acm/problem/23482">小A的最短路</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小A这次来到一个景区去旅游，景区里面有 $N$ 个景点，景点之间有 $N-1$ 条路径。小A从当前的一个景点移动到下一个景点需要消耗一点的体力值。但是景区里面有两个景点比较特殊，它们之间是可以直接坐观光缆车通过，不需要消耗体力值。而小A不想走太多的路，所以他希望你能够告诉它，从当前的位置出发到他想要去的那个地方，他最少要消耗的体力值是多少。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行一个整数 $N$ 代表景区的个数。<br>接下来 $N-1$ 行每行两个整数 $u,v$ 代表从位置u到v之间有一条路径可以互相到达。<br>接下来的一行两个整数 $U,V$ 表示这两个城市之间可以直接坐缆车到达。<br>接下来一行一个整数 $Q$ ，表示有 $Q$ 次询问。<br>接下来的 $Q$ 行每行两个整数 $x,y$ ,代表小A的位置在 $x$，而他想要去的地方是 $y$ 。</p><h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h3><p>对于每个询问下 $x,y$ 输出一个结果，代表 $x$ 到 $y$ 消耗的最少体力</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="input1"><a href="#input1" class="headerlink" title="input1"></a>input1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br><span class="line">2</span><br><span class="line">1 3</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><h3 id="output1"><a href="#output1" class="headerlink" title="output1"></a>output1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a>Limitation</h2><p>数据范围：<br>$1≤N≤5e5， 1≤Q≤2e6$</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>因为这个题有n个点，n-1条边，所以我们发现这个图其实是个树，所以这题的核心点在于找到起点到终点的最近公共祖先，他们的最近公共祖先深度分别减去起点终点的深度之和就是答案（记作jl（起点，终点））。</p><p>不过我们意识到有两个特别的点，他们可以直接坐缆车到达。那么我们只要求jl（起点，第一个传送点）+jl（终点，第二个传送点）和jl（起点，第二个传送点）+jl（终点，第一个传送点）和jl（起点，终点）的最小值就是这个题的答案。<br>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> to;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">    <span class="type">int</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">edge e[<span class="number">1000005</span>];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; qe;</span><br><span class="line"><span class="type">int</span> head[<span class="number">500005</span>],cnt=<span class="number">1</span>,depth[<span class="number">500005</span>];</span><br><span class="line"><span class="type">int</span> fa[<span class="number">500005</span>][<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    e[cnt].next=head[u];</span><br><span class="line">    e[cnt].to=v;</span><br><span class="line">    e[cnt].w=w;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> depth);</span><br><span class="line">    depth[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    depth[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    qe.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!qe.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> x=qe.<span class="built_in">front</span>();</span><br><span class="line">        qe.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i!=<span class="number">0</span>;i=e[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(depth[y]&gt;depth[x])&#123;</span><br><span class="line">                depth[y]=depth[x]+e[i].w;</span><br><span class="line">                qe.<span class="built_in">push</span>(y);</span><br><span class="line">                fa[y][<span class="number">0</span>]=x;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">20</span>;j++)&#123;</span><br><span class="line">                    fa[y][j]=fa[fa[y][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[x]&lt;depth[y])&#123;</span><br><span class="line">        <span class="built_in">swap</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[fa[x][i]]&gt;=depth[y])&#123;</span><br><span class="line">            x=fa[x][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[x][i]!=fa[y][i])&#123;</span><br><span class="line">            x=fa[x][i];</span><br><span class="line">            y=fa[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">jl</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> depth[u]+depth[v]<span class="number">-2</span>*depth[<span class="built_in">lca</span>(u,v)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,q,u,v;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        <span class="built_in">add</span>(u,v,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">add</span>(v,u,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">    cin&gt;&gt;q;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="type">int</span> ans=<span class="built_in">jl</span>(x,y);</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,<span class="built_in">jl</span>(x,u)+<span class="built_in">jl</span>(y,v));</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,<span class="built_in">jl</span>(x,v)+<span class="built_in">jl</span>(y,u));</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>践踏 题解</title>
      <link href="/2024/03/17/Post10/"/>
      <url>/2024/03/17/Post10/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/03/17/Post10/1.jpg"></p><span id="more"></span><h1 id="践踏"><a href="#践踏" class="headerlink" title="践踏"></a><a href="https://ac.nowcoder.com/acm/contest/26896/1002">践踏</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>首先给定一个定值k，支持如下操作（在数轴上）</p><ol><li>加入一条线段$[l,r]$</li><li>删除一条已经存在的线段</li><li>给定$x$，问有多少个区间包含$x+kt$，其中t是一个整数变量，即$t ∈ Z$<br>比如说当$x&#x3D;2,k&#x3D;3$的时候，区间$[7,10]$是应该算入答案的，因为$x+2k&#x3D;8$，且$7 ≤ 8 ≤ 10$</li></ol><p>如果$n&#x3D;0$，那么你只需要输出一行”fafa”然后结束程序即可（注意不输出双引号）</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行两个整数$n,k$，分别表示操作次数以及定值$k$<br>之后有$n$行，每行先输入一个整数$op$，之后分类讨论：</p><ol><li>$op&#x3D;1$，此时再输入$[l,r]$，表示加入一个区间$[l,r]$</li><li>$op&#x3D;2$，此时再输入$[l,r]$，表示删除区间$[l,r]$，保证这个区间存在（如果存在多个相同的区间，那么只需要删除其中的任意一个）</li><li>$op&#x3D;3$，此时再输入$x$，之后需要输出答案并换行.</li></ol><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于每一个$op&#x3D;3$的操作，输出查询结果后换行</p><h2 id="Samples"><a href="#Samples" class="headerlink" title="Samples"></a>Samples</h2><h3 id="input1"><a href="#input1" class="headerlink" title="input1"></a>input1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 7</span><br><span class="line">1 3393 14151</span><br><span class="line">3 13229</span><br><span class="line">1 3427 18356</span><br><span class="line">1 7602 20138</span><br><span class="line">1 8566 28714</span><br><span class="line">1 1076 32552</span><br><span class="line">2 3427 18356</span><br><span class="line">2 8566 28714</span><br><span class="line">3 10962</span><br><span class="line">1 387 7783</span><br></pre></td></tr></table></figure><h3 id="output1"><a href="#output1" class="headerlink" title="output1"></a>output1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="input2"><a href="#input2" class="headerlink" title="input2"></a>input2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0</span><br></pre></td></tr></table></figure><h3 id="output2"><a href="#output2" class="headerlink" title="output2"></a>output2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fafa</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a>Limitation</h2><p>一共有20个测试点，每个测试点5分</p><p>有4个测试点保证：n≤1000</p><p>有另外5个测试点保证：n≤10000</p><p>对于全部数据，保证：</p><p>$0 ≤ n,k ≤ 10^5$</p><p>$0 ≤ l ≤ r ≤ 10^9$<br>$0 ≤ x ≤ 10^9$</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>我们首先考虑k为0的情况怎么做，也就是查有多少个区间包含了点x，我们考虑什么样的区间不会对答案产生贡献，也就是右端点小于点x的区间和左端点大于点x的区间，那么我们离散化之后，利用树状数组维护差分前缀和即可，对于操作1，add(L, 1),add(R+1,-1),操作二add(L,-1),add(R+1,1),操作3，query(x)即可</p><p>我们考虑k不为0的情况，我们需要查询所有满足$y &#x3D; x + k \times t$的点，肯定是不能够暴力的，对于这一类点，我们可以发现他们在模k意义下是相等的，那么我们也可以想到将所有的区间变成模k意义下的区间，查询其是否包含点$x$模$k$后的值，我们所有的区间，x都是正数，所有这样肯定是没有问题的，如果有负数的话，就会复杂一些。因为我们需要使用树状数组，假如我们在树状数组上查询或者修改小于等于0的问题，就g了，建议自己试一下，所有我们取模的时候，将其模k后加1就可以避免查询或者修改为0的位置。</p><p>接下来我们考虑如何在树状数组上实现，如果区间[L, R]的长度大于等于k，对于任意的点x，我们假设其模k并加1后的值为y，我们一定是包含他的，所以我们直接add(1, 1), add(k + 1, -1), 我们设经过处理之后的L为L1,处理之后的R为R1,那么如果$L_1≤R_1$，我们直接add(L, 1), add(R + 1, -1),否则满足条件的区间是[L1, k]和[1, R1]，所以我们需要add(1,1),add(R1 + 1, -1), add(L1, 1), add(k + 1, -1); 查询的时候直接query(y)即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,tr[<span class="number">100005</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">tr[i]+=num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&gt;<span class="number">0</span>;i-=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">sum+=tr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ls</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(vt.<span class="built_in">begin</span>(),vt.<span class="built_in">end</span>(),x)-vt.<span class="built_in">begin</span>()+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k,op[<span class="number">100005</span>],l[<span class="number">100005</span>],r[<span class="number">100005</span>];</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;fafa&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;op[i];</span><br><span class="line"><span class="keyword">if</span>(op[i]==<span class="number">1</span>||op[i]==<span class="number">2</span>)&#123;</span><br><span class="line">cin&gt;&gt;l[i]&gt;&gt;r[i];</span><br><span class="line">vt.<span class="built_in">push_back</span>(l[i]);</span><br><span class="line">vt.<span class="built_in">push_back</span>(r[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cin&gt;&gt;l[i];</span><br><span class="line">vt.<span class="built_in">push_back</span>(l[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(vt.<span class="built_in">begin</span>(),vt.<span class="built_in">end</span>());</span><br><span class="line">vt.<span class="built_in">erase</span>(<span class="built_in">unique</span>(vt.<span class="built_in">begin</span>(),vt.<span class="built_in">end</span>()),vt.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(op[i]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="built_in">ls</span>(l[i]),<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(<span class="built_in">ls</span>(r[i])+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[i]==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="built_in">ls</span>(l[i]),<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">add</span>(<span class="built_in">ls</span>(r[i])+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[i]==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="built_in">find</span>(<span class="built_in">ls</span>(l[i]));</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(op[i]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(r[i]-l[i]&gt;=k)&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(k+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> ll=l[i]%k+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> rr=r[i]%k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(rr&gt;=ll)&#123;</span><br><span class="line"><span class="built_in">add</span>(ll,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(rr+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(rr+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">add</span>(ll,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(k+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[i]==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(r[i]-l[i]&gt;=k)&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">add</span>(k+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> ll=l[i]%k+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> rr=r[i]%k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(rr&gt;=ll)&#123;</span><br><span class="line"><span class="built_in">add</span>(ll,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">add</span>(rr+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">add</span>(rr+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(ll,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">add</span>(k+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="built_in">find</span>(l[i]%k+<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圆形加法 题解</title>
      <link href="/2024/03/16/Post9/"/>
      <url>/2024/03/16/Post9/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/03/16/Post9/1.jpg"></p><span id="more"></span><h1 id="圆形加法-需要校园网访问"><a href="#圆形加法-需要校园网访问" class="headerlink" title="圆形加法(需要校园网访问)"></a><a href="http://172.25.5.128/p/185">圆形加法</a>(需要校园网访问)</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>你有一个长度为 $n$ 的序列 $x$，其中元素由 $0$ 到 $n-1$编号。序列各元素初始全为 $0$。</p><p>你可以进行若干次如下操作：每次操作选取一组 $i$ 和 $k$ $(0 \leq i \leq n - 1, 1 \leq k \leq n)$，对所有满足 $i \leq j \leq i +k-1$ 的 $j$，执行 $x_{j \bmod n} \leftarrow x_{j \bmod n} + 1$。（通俗地讲就是将序列首尾相接拼成一个环，每次选取环上的一段，将其上元素的值全部加 $1$。）</p><p>现给定另一个序列 $A$，求出由 $x$ 变换为 $A$ 所需的最小操作数。</p><h2 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h2><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>标准输入以下格式给出：</p><p>$ N $</p><p>$ A_0 $ $ A_1 $ $ \cdots $ $ A_{N-1} $</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>一个整数，表示由 $x$ 变换为 $A$ 所需的最小操作数。</p><h2 id="Samples"><a href="#Samples" class="headerlink" title="Samples"></a>Samples</h2><h3 id="input1"><a href="#input1" class="headerlink" title="input1"></a>input1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 1 2</span><br></pre></td></tr></table></figure><h3 id="output1"><a href="#output1" class="headerlink" title="output1"></a>output1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>样例解释:</strong></p><p>您可以按如下方式操作:</p><p>最初，$x&#x3D;(0,0,0,0)$;</p><p>$i &#x3D; 1,k &#x3D; 3$ 时进行操作，$x&#x3D;( 0，1，1，1)$;</p><p>$i &#x3D; 3,k &#x3D; 3$ 时进行操作，$x&#x3D;( 1，2，1，2)$ ;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3 1 4 1 5</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1000000000</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000000000</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a>Limitation</h2><p>$ 1\ \leq\ N\ \leq\ 200000 $</p><p>$ 1\ \leq\ A_i\ \leq\ 10^9 $</p><p>所有输入均为整数</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>很有趣的一个思维题，首先我们把这个数列转化成差分形式，例如1 2 1 2转化成-1 1 -1 1，例如3 1 4 1 5转化成-2 2 3 -3 4（第一个-1和第一个-2是因为首位与末尾相接），这样我们就知道有多少组1 -1对而不用考虑他们怎样匹配的。</p><p>但是这样我们少考虑了一种情况，也就是首尾相接时，1和-1在同一个位置导致他们相消了，但是在这种情况下是整体加+1，所以也只需考虑数列里面最大的数和1-1对数的差值，就是首位相连的个数。</p><p>这样我们就得到了所有的1 -1对（包括首尾相接的1 -1对），所以我们只要统计所有正数之和加上相消的1 -1对数就是题目的答案了。（注意开longlong）</p><p>洛谷有个类似题，可以去尝试一下<a href="https://www.luogu.com.cn/problem/P1969">P1969 [NOIP2013 提高组] 积木大赛 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>AC代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll n,num[<span class="number">200005</span>],maxx,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;num[i]);</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(num[i]-num[i<span class="number">-1</span>]&gt;<span class="number">0</span>)</span><br><span class="line">ans+=num[i]-num[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(num[<span class="number">0</span>]-num[n<span class="number">-1</span>]&gt;<span class="number">0</span>)</span><br><span class="line">ans+=num[<span class="number">0</span>]-num[n<span class="number">-1</span>];</span><br><span class="line">cout&lt;&lt;<span class="built_in">max</span>(maxx,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求m区间最小值 题解</title>
      <link href="/2024/03/16/Post8/"/>
      <url>/2024/03/16/Post8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/03/16/Post8/1.jpg"></p><span id="more"></span><h1 id="求m区间内的最小值"><a href="#求m区间内的最小值" class="headerlink" title="求m区间内的最小值"></a><a href="https://www.luogu.com.cn/problem/P1440">求m区间内的最小值</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个含有 $n$ 项的数列，求出每一项前的 $m$ 个数到它这个区间内的最小值。若前面的数不足 $m$ 项则从第 $1$ 个数开始，若前面没有数则输出 $0$。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数，分别表示 $n$，$m$。</p><p>第二行，$n$ 个正整数，为所给定的数列 $a_i$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>$n$ 行，每行一个整数，第 $i$ 个数为序列中 $a_i$ 之前 $m$ 个数的最小值。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">7 8 1 4 3 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100%$ 的数据，保证 $1\le m\le n\le2\times10^6$，$1\le a_i\le3\times10^7$。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>本题有三种做法：st表，线段树，单调队列<br>这个题对于st表和线段树来说相当于模板题。<br>下面是用st表实现的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">2000005</span>],dp[<span class="number">2000005</span>][<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">dp[i][<span class="number">0</span>]=a[i];</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">log2</span>(n)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=t;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>;i++)&#123;</span><br><span class="line">dp[i][j]=<span class="built_in">min</span>(dp[i][j<span class="number">-1</span>],dp[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">l=<span class="built_in">max</span>(i-m,<span class="number">1</span>);</span><br><span class="line">r=i<span class="number">-1</span>;</span><br><span class="line">t=<span class="built_in">log2</span>(r-l+<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;<span class="built_in">min</span>(dp[l][t],dp[r-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>][t])&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们主要讲一些怎么用单调队列实现。<br>我们每次要找的都是前m个最大的，那么我们只要把前面的数以及他们的索引塞进单调队列里面，判断单调队列的头部元素是不是“过期”的，如果没有过期（在前m范围内）直接输出即可，对于那些过期的元素（不在m范围内）在头部时，我们只要pop出现，找到下一个没过期的元素即可。<br>下面是单调队列实现的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; qe;</span><br><span class="line"><span class="type">int</span> num[<span class="number">2000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;num[i];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">qe.<span class="built_in">push</span>(&#123;num[<span class="number">1</span>],<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(qe.<span class="built_in">top</span>().second&lt;i-m)qe.<span class="built_in">pop</span>();</span><br><span class="line">cout&lt;&lt;qe.<span class="built_in">top</span>().first&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">qe.<span class="built_in">push</span>(&#123;num[i],i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现，一些问题我们可以套一些对应的算法模板（可能此算法很实现起来很复杂，例如线段树），也可以通过一些巧妙的方式使它能通过简单的数据结构也能解决。（有点像高中的圆锥曲线，有易想但是复杂的公式，也有难想但是简单的方法）但是对于我们来说都是需要掌握的，并不是每个问题都能巧妙地解决，也并不是每个问题都能套对应的算法模板。</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM算法之倍增</title>
      <link href="/2024/03/09/Post7/"/>
      <url>/2024/03/09/Post7/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/03/09/Post7/1.png"></p><span id="more"></span><h1 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h1><h2 id="倍增思想"><a href="#倍增思想" class="headerlink" title="倍增思想"></a>倍增思想</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>倍增法（英语：binary lifting），顾名思义就是翻倍。它能够使线性的处理转化为对数级的处理，大大地优化时间复杂度。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>我们可以对任意一个数字拆成二进制的形式，例如 $37$ 的二进制形式为 $100101$ ，可以拆成 $32(100000)+4(100)+1(1)$ 之和，故只要预处理 $1、2、4、8……log_2(n)$，任意数都能转换成这些数的组合，不用对每一个数都进行处理，从而降低时间复杂度。</p><pre class="mermaid">flowchart    id1[100101] --> id2[100000]    id1[100101] --> id3[100]    id1[100101] --> id4[1]</pre><h2 id="倍增在快速幂上的应用"><a href="#倍增在快速幂上的应用" class="headerlink" title="倍增在快速幂上的应用"></a>倍增在快速幂上的应用</h2><h3 id="【模板】快速幂"><a href="#【模板】快速幂" class="headerlink" title="【模板】快速幂"></a><a href="https://www.luogu.com.cn/problem/P1226">【模板】快速幂</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你三个整数 $a,b,p$，求 $a^b \bmod p$。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入只有一行三个整数，分别代表 $a,b,p$。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行一个字符串 <code>a^b mod p=s</code>，其中 $a,b,p$ 分别为题目给定的值， $s$ 为运算结果。</p><h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h4><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 10 9</span><br></pre></td></tr></table></figure><h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2^10 mod 9=7</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p><strong>样例解释</strong></p><p>$2^{10} &#x3D; 1024$，$1024 \bmod 9 &#x3D; 7$。</p><p><strong>数据规模与约定</strong></p><p>对于 $100%$ 的数据，保证 $0\le a,b &lt; 2^{31}$，$a+b&gt;0$，$2 \leq p \lt 2^{31}$。</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ans=ans*a%p;</span><br><span class="line">        &#125;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,p;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d^%d mod %d=%d&quot;</span>,a,b,p,<span class="built_in">ksm</span>(a,b,p));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="倍增在LCA中的应用"><a href="#倍增在LCA中的应用" class="headerlink" title="倍增在LCA中的应用"></a>倍增在LCA中的应用</h2><h3 id="【模板】最近公共祖先（LCA）"><a href="#【模板】最近公共祖先（LCA）" class="headerlink" title="【模板】最近公共祖先（LCA）"></a><a href="https://www.luogu.com.cn/problem/P3379">【模板】最近公共祖先（LCA）</a></h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>如题，给定一棵有根多叉树，请求出指定两个点直接最近的公共祖先。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个正整数 $N,M,S$，分别表示树的结点个数、询问的个数和树根结点的序号。</p><p>接下来 $N-1$ 行每行包含两个正整数 $x, y$，表示 $x$ 结点和 $y$ 结点之间有一条直接连接的边（数据保证可以构成树）。</p><p>接下来 $M$ 行每行包含两个正整数 $a, b$，表示询问 $a$ 结点和 $b$ 结点的最近公共祖先。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包含 $M$ 行，每行包含一个正整数，依次为每一个询问的结果。</p><h4 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h4><h5 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">5 5 4</span><br><span class="line">3 1</span><br><span class="line">2 4</span><br><span class="line">5 1</span><br><span class="line">1 4</span><br><span class="line">2 4</span><br><span class="line">3 2</span><br><span class="line">3 5</span><br><span class="line">1 2</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><h5 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h4><p>对于 $30%$ 的数据，$N\leq 10$，$M\leq 10$。</p><p>对于 $70%$ 的数据，$N\leq 10000$，$M\leq 10000$。</p><p>对于 $100%$ 的数据，$1 \leq N,M\leq 500000$，$1 \leq x, y,a ,b \leq N$，<strong>不保证</strong> $a \neq b$。</p><p>样例说明：</p><p>该树结构如下：</p><p> <img src="https://cdn.luogu.com.cn/upload/pic/2282.png"> </p><p>第一次询问：$2, 4$ 的最近公共祖先，故为 $4$。</p><p>第二次询问：$3, 2$ 的最近公共祖先，故为 $4$。</p><p>第三次询问：$3, 5$ 的最近公共祖先，故为 $1$。</p><p>第四次询问：$1, 2$ 的最近公共祖先，故为 $4$。</p><p>第五次询问：$4, 5$ 的最近公共祖先，故为 $4$。</p><p>故输出依次为 $4, 4, 1, 4, 4$。</p><p>2021&#x2F;10&#x2F;4 数据更新 @fstqwq：应要求加了两组数据卡掉了暴力跳。</p><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vt[<span class="number">500005</span>];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; qe;</span><br><span class="line"><span class="type">int</span> fa[<span class="number">500005</span>][<span class="number">31</span>],depth[<span class="number">500005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    qe.<span class="built_in">push</span>(root);</span><br><span class="line">    depth[root]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!qe.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> x=qe.<span class="built_in">front</span>();</span><br><span class="line">        qe.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> y:vt[x])&#123;</span><br><span class="line">            <span class="keyword">if</span>(depth[y]==<span class="number">0</span>)&#123;</span><br><span class="line">                qe.<span class="built_in">push</span>(y);</span><br><span class="line">                depth[y]=depth[x]+<span class="number">1</span>;</span><br><span class="line">                fa[y][<span class="number">0</span>]=x;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30</span>;i++)&#123;</span><br><span class="line">                    fa[y][i]=fa[fa[y][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[a]&lt;depth[b])<span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[fa[a][i]]&gt;=depth[b])</span><br><span class="line">        a=fa[a][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a==b)<span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[a][i]!=fa[b][i])&#123;</span><br><span class="line">            a=fa[a][i];</span><br><span class="line">            b=fa[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,s,a,b;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        vt[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        vt[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">lca</span>(a,b)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="倍增在ST表中的应用"><a href="#倍增在ST表中的应用" class="headerlink" title="倍增在ST表中的应用"></a>倍增在ST表中的应用</h2><h3 id="【模板】ST-表"><a href="#【模板】ST-表" class="headerlink" title="【模板】ST 表"></a><a href="https://www.luogu.com.cn/problem/P3865">【模板】ST 表</a></h3><h4 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h4><p>这是一道 ST 表经典题——静态区间最大值</p><p><strong>请注意最大数据时限只有 0.8s，数据强度不低，请务必保证你的每次查询复杂度为 $O(1)$。若使用更高时间复杂度算法不保证能通过。</strong></p><p>如果您认为您的代码时间复杂度正确但是 TLE，可以尝试使用快速读入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数返回值为读入的第一个整数。</p><p><strong>快速读入作用仅为加快读入，并非强制使用。</strong></p><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个长度为 $N$ 的数列，和 $ M $ 次询问，求出每一次询问的区间内数字的最大值。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 $N,M$，分别表示数列的长度和询问的个数。</p><p>第二行包含 $N$ 个整数（记为 $a_i$），依次表示数列的第 $i$ 项。</p><p>接下来 $M$ 行，每行包含两个整数 $l_i,r_i$，表示查询的区间为 $[l_i,r_i]$。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包含 $M$ 行，每行一个整数，依次表示每一次询问的结果。</p><h4 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h4><h5 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">8 8</span><br><span class="line">9 3 1 7 5 6 0 8</span><br><span class="line">1 6</span><br><span class="line">1 5</span><br><span class="line">2 7</span><br><span class="line">2 6</span><br><span class="line">1 8</span><br><span class="line">4 8</span><br><span class="line">3 7</span><br><span class="line">1 8</span><br></pre></td></tr></table></figure><h5 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">9</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h4 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h4><p>对于 $30%$ 的数据，满足 $1\le N,M\le 10$。</p><p>对于 $70%$ 的数据，满足 $1\le N,M\le {10}^5$。</p><p>对于 $100%$ 的数据，满足 $1\le N\le {10}^5$，$1\le M\le 2\times{10}^6$，$a_i\in[0,{10}^9]$，$1\le l_i\le r_i\le N$。</p><h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num[<span class="number">100005</span>],f[<span class="number">100005</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">st</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=<span class="built_in">log2</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)f[i][<span class="number">0</span>]=num[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&lt;=n;j++)&#123;</span><br><span class="line">            f[j][i]=<span class="built_in">max</span>(f[j][i<span class="number">-1</span>],f[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t=<span class="built_in">log2</span>(r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(f[l][t],f[r-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>][t]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">st</span>(n);</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">find</span>(a,b)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM算法之分治</title>
      <link href="/2024/02/23/Post6/"/>
      <url>/2024/02/23/Post6/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/02/23/Post6/1.png"></p><span id="more"></span><h1 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h1><h2 id="什么是分治"><a href="#什么是分治" class="headerlink" title="什么是分治"></a>什么是分治</h2><p>分治法是算法设计方法的一种。它通过将问题划分为规模更小的子问题，递归地解决划分后的子问题，再将结果合并从而高效地解决问题。</p><h2 id="分治的过程"><a href="#分治的过程" class="headerlink" title="分治的过程"></a>分治的过程</h2><p>他的流程可以分为三步：分解–&gt;解决–&gt;合并。</p><ol><li>分解原问题为结构相同的子问题</li><li>分解到某个容易求解的边界之后，进行递归求解。</li><li>将子问题的解合并成原问题的解。</li></ol><blockquote><p>注意：如果各子问题是不独立的，则分治法要重复地解公共的子问题，也就做了许多不必要的工作。此时虽然也可用分治法，但一般用 动态规划 较好。</p></blockquote><pre class="mermaid">flowchart    id1[原始问题] --> id2[问题分解]    id2 --> id11[子问题]    id2 --> id12[子问题]    id11 --> id111[子问题]    id11 --> id112[子问题]    id12 --> id121[子问题]    id12 --> id122[子问题]    id111 -.-> id3111[问题求解]    id112 -.-> id3112[问题求解]    id121 -.-> id3121[问题求解]    id122 -.-> id3122[问题求解]    id3111 --> id41[合并子解]    id3112 --> id41    id3121 --> id42[合并子解]    id3122 --> id42    id41 --> id5[合并子解]    id42 --> id5    id5 --> di6[问题的解]</pre><h2 id="如何判断分治问题"><a href="#如何判断分治问题" class="headerlink" title="如何判断分治问题"></a>如何判断分治问题</h2><p>一个问题是否适合使用分治解决，通常可以参考以下几个判断依据：</p><ol><li>问题可以分解：原问题可以分解成规模更小、类似的子问题，以及能够以相同方式递归地进行划分。</li><li>子问题是独立的：子问题之间没有重叠，互不依赖、可以独立解决。</li><li>子问题的解可以合并：原问题的解通过合并子问题的解得来。</li></ol><h2 id="分治的时间复杂度"><a href="#分治的时间复杂度" class="headerlink" title="分治的时间复杂度"></a>分治的时间复杂度</h2><p>假设将 $n$ 个问题分解为 $k$ 个 规模为 $\frac{n}{m}$ 子问题,合并和分解的时间复杂度设为 $f(n)$ ，故总的时间复杂度为：<br>$$T(n)&#x3D;kT(\frac{n}{m} )+f(n)$$<br>通过求解（代换法、递归树法、主定理法），得出时间复杂度为：<br>$$T(n)&#x3D;O(nlog(n))$$</p><h2 id="分治的常见应用"><a href="#分治的常见应用" class="headerlink" title="分治的常见应用"></a>分治的常见应用</h2><p>分治不仅可以用来解决许多算法问题，还在数据结构的设计中应用得非常广泛。</p><p>算法：</p><ul><li>寻找最近点对</li><li>大整数乘法</li><li>矩阵乘法</li><li>汉诺塔问题</li><li>求解逆序对<br>……</li></ul><p>数据结构：</p><ul><li>二分查找</li><li>归并排序</li><li>快速排序</li><li>桶排序</li><li>树</li><li>堆<br>……</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="平面最近点对"><a href="#平面最近点对" class="headerlink" title="平面最近点对"></a><a href="https://www.luogu.com.cn/problem/P1429">平面最近点对</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定平面上 $n$ 个点，找出其中的一对点的距离，使得在这 $n$ 个点的所有点对中，该距离为所有点对中最小的</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行：$n$ ，保证 $2\le n\le 200000$ 。</p><p>接下来 $n$ 行：每行两个实数：$x\ y$ ，表示一个点的行坐标和列坐标，中间用一个空格隔开。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>仅一行，一个实数，表示最短距离，精确到小数点后面 $4$ 位。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.0000</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>数据保证 $0\le x,y\le 10^9$</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mermaid的基本语法</title>
      <link href="/2024/02/18/Post5/"/>
      <url>/2024/02/18/Post5/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/02/18/Post5/1.png"></p><span id="more"></span><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><p>直接输入节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    id</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    id</pre><hr><h4 id="带有文本的节点"><a href="#带有文本的节点" class="headerlink" title="带有文本的节点"></a>带有文本的节点</h4><p>使用<code>[]</code>将文本括起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    id1[节点]</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    id1[节点]</pre><hr><h4 id="带有unicode文本的节点"><a href="#带有unicode文本的节点" class="headerlink" title="带有unicode文本的节点"></a>带有unicode文本的节点</h4><p>使用<code>&quot;&quot;</code>将unicode文本括起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    id[&quot;❤&quot;]</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart LR    id["❤"]</pre><hr><h4 id="带有Markdown文本的节点"><a href="#带有Markdown文本的节点" class="headerlink" title="带有Markdown文本的节点"></a>带有Markdown文本的节点</h4><p>使用<code>&quot;``&quot;</code>将Markdown文本括起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    markdown[&quot;`This **is** _Markdown_`&quot;]</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    markdown["`This **is** _Markdown_`"]</pre><blockquote><p>这个博客自带的Mermaid好像并不支持Markdown语法</p></blockquote><hr><h4 id="使用转义字符的代码"><a href="#使用转义字符的代码" class="headerlink" title="使用转义字符的代码"></a>使用转义字符的代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    id[&quot;#9829;&quot;]</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    id["#9829;"]</pre><hr><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><table><thead><tr><th>命令</th><th>方向</th></tr></thead><tbody><tr><td>TD</td><td>从上到下</td></tr><tr><td>TB</td><td>从上到下</td></tr><tr><td>BT</td><td>从下到上</td></tr><tr><td>LR</td><td>从左到右</td></tr><tr><td>RL</td><td>从右到左</td></tr></tbody></table><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart TB    Start --> Stop</pre><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart BT</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart BT    Start --> Stop</pre><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart LR    Start --> Stop</pre><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart RL</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart RL    Start --> Stop</pre><hr><h3 id="节点-1"><a href="#节点-1" class="headerlink" title="节点"></a>节点</h3><table><thead><tr><th>命令</th><th>形状</th></tr></thead><tbody><tr><td>[]</td><td>方形</td></tr><tr><td>()</td><td>圆边形</td></tr><tr><td>([])</td><td>体育场形</td></tr><tr><td>[[]]</td><td>子程序形</td></tr><tr><td>[()]</td><td>圆柱形</td></tr><tr><td>(())</td><td>圆形</td></tr><tr><td>&gt;]</td><td>不规则形</td></tr><tr><td>{}</td><td>菱形</td></tr><tr><td>[&#x2F;&#x2F;]</td><td>平行四边形</td></tr><tr><td>[\]</td><td>反平行四边形</td></tr></tbody></table><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    id1[节点1]</span><br><span class="line">    id2(节点2)</span><br><span class="line">    id3([节点3])</span><br><span class="line">    id4[[节点4]]</span><br><span class="line">    id5[(节点5)]</span><br><span class="line">    id6((节点6))</span><br><span class="line">    id7&gt;节点7]</span><br><span class="line">    id8&#123;节点8&#125;</span><br><span class="line">    id9[/节点9/]</span><br><span class="line">    id10[\节点10\]</span><br><span class="line">    id11[/节点11\]</span><br><span class="line">    id12[\节点12/]</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    id1[节点1]    id2(节点2)    id3([节点3])    id4[[节点4]]    id5[(节点5)]    id6((节点6))</pre><pre class="mermaid">flowchart    id7>节点7]    id8{节点8}    id9[/节点9/]    id10[\节点10\]    id11[/节点11\]    id12[\节点12/]</pre><hr><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><table><thead><tr><th>命令</th><th>链接方式</th></tr></thead><tbody><tr><td>—</td><td>直线链接</td></tr><tr><td>–&gt;</td><td>箭头链接</td></tr><tr><td>-.-</td><td>虚线链接</td></tr><tr><td>-.-&gt;</td><td>虚线箭头链接</td></tr><tr><td>&#x3D;&#x3D;&#x3D;</td><td>粗链接</td></tr><tr><td>&#x3D;&#x3D;&gt;</td><td>粗箭头链接</td></tr><tr><td>–o</td><td>圆边链接</td></tr><tr><td>–x</td><td>交叉边链接</td></tr><tr><td>o–o</td><td>两圆边链接</td></tr><tr><td>x–x</td><td>两交叉边链接</td></tr><tr><td>–文本—</td><td>带文本的直线链接</td></tr><tr><td>–文本–&gt;</td><td>带文本的箭头链接</td></tr><tr><td>-.文本.-</td><td>带文本的虚线链接</td></tr><tr><td>-.文本.-&gt;</td><td>带文本的虚线箭头链接</td></tr><tr><td>&#x3D;&#x3D;文本&#x3D;&#x3D;&#x3D;</td><td>带文本的粗链接</td></tr><tr><td>&#x3D;&#x3D;文本&#x3D;&#x3D;&gt;</td><td>带文本的粗箭头链接</td></tr><tr><td>–文本–o</td><td>带文本的圆边链接</td></tr><tr><td>–文本–x</td><td>带文本的交叉边链接</td></tr><tr><td>o–文本–o</td><td>带文本的两圆边链接</td></tr><tr><td>x–文本–x</td><td>带文本的两交叉边链接</td></tr></tbody></table><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    A --- B</span><br><span class="line">    C --&gt; D</span><br><span class="line">    E -.- F</span><br><span class="line">    G -.-&gt; H</span><br><span class="line">    I === J</span><br><span class="line">    K ==&gt; L</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    A --- B    C --> D    E -.- F    G -.-> H    I === J    K ==> L</pre><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    A --文本--- B</span><br><span class="line">    C --文本--&gt; D</span><br><span class="line">    E -.文本.- F</span><br><span class="line">    G -.文本.-&gt; H</span><br><span class="line">    I ==文本=== J</span><br><span class="line">    K ==文本==&gt; L</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    A --文本--- B    C --文本--> D    E -.文本.- F    G -.文本.-> H    I ==文本=== J    K ==文本==> L</pre><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    A --o B</span><br><span class="line">    C --x D</span><br><span class="line">    E o--o F</span><br><span class="line">    G x--x H</span><br><span class="line">    I --文本--o J</span><br><span class="line">    K --文本--x L</span><br><span class="line">    M o--文本--o N</span><br><span class="line">    O x--文本--x P</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    A --o B    C --x D    E o--o F    G x--x H    I --文本--o J    K --文本--x L    M o--文本--o N    O x--文本--x P</pre><hr><p>增加<code>- = .</code>号可以使得链接更长</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    A---B</span><br><span class="line">    C----D</span><br><span class="line">    E-----F</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    A---B    C----D    E-----F</pre><hr><h3 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h3><h4 id="子图-1"><a href="#子图-1" class="headerlink" title="子图"></a>子图</h4><p>用<code>subgraph title[]</code> <code>end</code>包裹起来为一个子图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line"></span><br><span class="line">    c1--&gt;a2</span><br><span class="line"></span><br><span class="line">subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">end</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    c1-->a2subgraph one    a1-->a2endsubgraph two    b1-->b2endsubgraph three    c1-->c2end</pre><hr><h4 id="子图的链接"><a href="#子图的链接" class="headerlink" title="子图的链接"></a>子图的链接</h4><p>子图与子图之间可以进行链接，子图和节点也能进行链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line"></span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    one --&gt; two</span><br><span class="line">    a1 --&gt; three</span><br><span class="line">    two --&gt; c1</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    subgraph one    a1-->a2    end    subgraph two    b1-->b2    end    subgraph three    c1-->c2    end    one --> two    a1 --> three    two --> c1</pre><hr><h4 id="子图的方向"><a href="#子图的方向" class="headerlink" title="子图的方向"></a>子图的方向</h4><p>可以用<code>direction XX</code>在子图中指明方向</p><pre class="mermaid">flowchart    subgraph TOP        direction RL        subgraph one            direction RL            C -->D        end        subgraph two            direction BT            E -->F        end         end        A --> TOP --> B    one --> two</pre><blockquote><p>如果任何子图的节点链接到外部，则子图方向将被忽略。相反，子图将继承父图的方向</p></blockquote><hr><h3 id="节点链接"><a href="#节点链接" class="headerlink" title="节点链接"></a>节点链接</h3><p><code>click</code>即可跳转到目标网址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    百度--&gt;个人博客</span><br><span class="line">    click 百度 &quot;https://www.baidu.com/&quot;</span><br><span class="line">    click 个人博客 &quot;https://cfn0324.github.io&quot;</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    百度-->个人博客    click 百度 "https://www.baidu.com/"    click 个人博客 "https://cfn0324.github.io"</pre><hr><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>使用<code>%%</code>即可在mermaid中注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flowchart</span><br><span class="line">    A--&gt;B</span><br><span class="line">    %% A指向B</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart    A-->B    %% A指向B</pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mermaid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM算法之并查集</title>
      <link href="/2024/02/17/Post4/"/>
      <url>/2024/02/17/Post4/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/02/17/Post4/1.png"></p><span id="more"></span><h3 id="并查集是什么"><a href="#并查集是什么" class="headerlink" title="并查集是什么"></a>并查集是什么</h3><p>并查集是一种用来管理元素分组情况的数据结构。主要有以下两种用法：</p><ul><li>查询元素a和元素b是否在一组</li><li>合并元素a和元素b所在的组</li></ul><p>注意：并查集可以进行查询和合并操作，但是无法进行分割操作。</p><h3 id="并查集的结构"><a href="#并查集的结构" class="headerlink" title="并查集的结构"></a>并查集的结构</h3><p>并查集本质是树形结构，每个元素对应一个节点，每个组对应一棵树。在并查集中，那个节点是哪个节点的父亲以及树的形状等信息无需多加关注，整体组成一个树形结构才是重要的。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>准备 $n$ 个节点来表示 $n$ 个元素,最开始时边都是自己指向自己。故我们初始化这些节点</p><pre class="mermaid">graphid1(1)-->id1(1)id2(2)-->id2(2)id3(3)-->id3(3)id4(4)-->id4(4)id5(5)-->id5(5)id6(6)-->id6(6)</pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fa[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        fa[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>首先我们需要找到两个要合并的节点的根节点，并将其中的一个根节点指向另一个根节点。</p><p>一个节点指向另一个节点，就形成了一颗树，多个组就合并为一个组了。</p><pre class="mermaid">graph BT    id2(2)-->id1(1)    id3(3)-->id1(1)    id4(4)-->id5(5)    id5(5)-->id6(6)</pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==fa[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unite</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(x)]=fa[<span class="built_in">find</span>(y)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>为了查询两个节点是否同属一个组，我们需要沿着树往上走，找到树的根是谁。如果两个节点的根相同，那么就是同属于一个组。</p><p>在上图中，$1、2、3$ 的根都是 $1$ ,故 $1、2、3$ 为同一组，而 $4、5、6$ 的根都是 $6$ ，故 $4、5、6$ 为同一组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集的注意点"><a href="#并查集的注意点" class="headerlink" title="并查集的注意点"></a>并查集的注意点</h3><p>并查集作为一种树状结构，树状结构在一定情况下会退化成链表，会导致复杂度变得很大，所以我们要想办法避免退化的发生。</p><p>我们有两种方法来避免发生退化：</p><ol><li>使高度小的树向高度高的树合并。</li><li>使用路径压缩。</li></ol><h4 id="考虑高度的合并"><a href="#考虑高度的合并" class="headerlink" title="考虑高度的合并"></a>考虑高度的合并</h4><ol><li>首先我们记录每棵树的高度。</li><li>合并时，如果高度不同，我们让高度低的向高度高的合并。</li><li>如果高度相同，任意使一棵树指向另一棵树，并将被指的树，高度加一。</li></ol><p>下图就是考虑了高度的合并,我们只要加入rank数组，并将unite函数简单修改就能实现。</p><pre class="mermaid">graph BT    id2(2)-->id1(1)    id3(3)-->id1(1)    id4(4)-->id5(5)    id5(5)-->id6(6)</pre><pre class="mermaid">graph BT    id1(1)-->id6(6)    id2(2)-->id1(1)    id3(3)-->id1(1)    id4(4)-->id5(5)    id5(5)-->id6(6)</pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> rank[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unite</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(rank[x]&lt;rank[y])&#123;</span><br><span class="line">        fa[x]=fa[y];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        fa[y]=fa[x];</span><br><span class="line">        <span class="keyword">if</span>(rank[x]==rank[y])</span><br><span class="line">            rank[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路径压缩的合并"><a href="#路径压缩的合并" class="headerlink" title="路径压缩的合并"></a>路径压缩的合并</h4><p>对于每个节点，一旦向上走到了一次根节点，就把这个点到父亲的节点改为直接到到根的节点。故再次查询这些节点时，就可以很快知道根节点是谁了。在使用这简化方法时，可以不用考虑高度变化的合并也能保持很低的复杂度。</p><p>下图就是路径压缩的合并，我们只要对find函数进行简单修改即可。</p><pre class="mermaid">graph BT    id5(5)-->id4(4)    id4(4)-->id3(3)    id3(3)-->id2(2)    id2(2)-->id1(1)    id22(2)-->id11(1)    id33(3)-->id11(1)    id44(4)-->id11(1)    id55(5)-->id11(1)</pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==fa[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>加入两个优化的并查集的效率很高，对于 $n$ 个元素的并查集，一次操作的复杂度是 $O(\alpha(n))$ 。这里的 $\alpha(n)$ 是阿克曼(Ackermann)函数的反函数，比 $O(log(n))$ 还快。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="http://poj.org/problem?id=1182">食物链(POJ 1182)</a></p><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>动物王国中有三类动物 $A,B,C$ ，这三类动物的食物链构成了有趣的环形。 $A$ 吃 $B$ ，  $B$ 吃 $C$ ， $C$ 吃 $A$ 。<br>现有 $N$ 个动物，以 $1－N$ 编号。每个动物都是 $A,B,C$ 中的一种，但是我们并不知道它到底是哪一种。</p><p>有人用两种说法对这 $N$ 个动物所构成的食物链关系进行描述：</p><p>第一种说法是 “$1$ $X$ $Y$” ，表示 $X$ 和 $Y$ 是同类。</p><p>第二种说法是 “$2$ $X$ $Y$” ，表示 $X$ 吃 $Y$ 。</p><p>此人对 $N$ 个动物，用上述两种说法，一句接一句地说出 $K$ 句话，这 $K$ 句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。</p><ol><li>当前的话与前面的某些真的话冲突，就是假话；</li><li>当前的话中 $X$ 或 $Y$比 $N$ 大，就是假话；</li><li>当前的话表示 $X$ 吃 $X$ ，就是假话。<br>你的任务是根据给定的$N（1 \leq N \leq 50,000）$和 $K$ 句话$（0 \leq K \leq 100,000）$，输出假话的总数。</li></ol><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>第一行是两个整数 $N$ 和 $K$ ，以一个空格分隔。</p><p>以下 $K$ 行每行是三个正整数 $D，X，Y$，两数之间用一个空格隔开，其中 $D$ 表示说法的种类。</p><p>若 $D&#x3D;1$ ，则表示 $X$ 和 $Y$ 是同类。</p><p>若 $D&#x3D;2$ ，则表示 $X$ 吃 $Y$。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>只有一个整数，表示假话的数目。</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">100 7</span><br><span class="line">1 101 1 </span><br><span class="line">2 1 2</span><br><span class="line">2 2 3 </span><br><span class="line">2 3 3 </span><br><span class="line">1 1 3 </span><br><span class="line">2 3 1 </span><br><span class="line">1 5 5</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[<span class="number">150005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">3</span>;i++)&#123;</span><br><span class="line">        fa[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x)</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unite</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="built_in">find</span>(x);</span><br><span class="line">    <span class="type">int</span> b=<span class="built_in">find</span>(y);</span><br><span class="line">    fa[a]=fa[b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">init</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>((x&lt;<span class="number">1</span>)||(x&gt;n)||(y&lt;<span class="number">1</span>)||(y&gt;n))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y+n))||(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y+<span class="number">2</span>*n)))&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fa[<span class="built_in">find</span>(x)]=fa[<span class="built_in">find</span>(y)];</span><br><span class="line">                fa[<span class="built_in">find</span>(x+n)]=fa[<span class="built_in">find</span>(y+n)];</span><br><span class="line">                fa[<span class="built_in">find</span>(x+<span class="number">2</span>*n)]=fa[<span class="built_in">find</span>(y+<span class="number">2</span>*n)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))||(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y+<span class="number">2</span>*n)))&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fa[<span class="built_in">find</span>(x)]=fa[<span class="built_in">find</span>(y+n)];</span><br><span class="line">                fa[<span class="built_in">find</span>(x+n)]=fa[<span class="built_in">find</span>(y+<span class="number">2</span>*n)];</span><br><span class="line">                fa[<span class="built_in">find</span>(x+<span class="number">2</span>*n)]=fa[<span class="built_in">find</span>(y)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTex数学命令</title>
      <link href="/2024/02/17/Post3/"/>
      <url>/2024/02/17/Post3/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/02/17/Post3/1.jpeg"></p><span id="more"></span><h3 id="上下标："><a href="#上下标：" class="headerlink" title="上下标："></a>上下标：</h3><ul><li>上标： x^1 –&gt; $x^1$</li><li>下标： x_1 –&gt; $x_1$</li></ul><h3 id="分式："><a href="#分式：" class="headerlink" title="分式："></a>分式：</h3><ul><li>行内分式：\frac{a}{b} –&gt; $\frac{a}{b}$</li><li>行间分式：\dfrac{a}{b} –&gt; $\dfrac{a}{b}$</li></ul><h3 id="根号："><a href="#根号：" class="headerlink" title="根号："></a>根号：</h3><ul><li>平方根：\sqrt{x} –&gt; $\sqrt{x}$</li><li>$n$ 次方根：\sqrt[n]{x} –&gt; $\sqrt[n]{x}$</li></ul><h3 id="求和、积分、极限："><a href="#求和、积分、极限：" class="headerlink" title="求和、积分、极限："></a>求和、积分、极限：</h3><ul><li>求和：\sum_{i&#x3D;1}^{n}a_i –&gt; $\sum_{i&#x3D;1}^{n}a_i$</li><li>积分：\int_{a}^{b}f(x)dx –&gt; $\int_{a}^{b}f(x)dx$</li><li>极限：\lim_{x\to\infty} –&gt; $\lim_{x\to\infty}$</li></ul><h3 id="矩阵、向量："><a href="#矩阵、向量：" class="headerlink" title="矩阵、向量："></a>矩阵、向量：</h3><ul><li>矩阵：\\begin{matrix}a&amp;b\\c&amp;d\end{matrix} –&gt; $\begin{matrix}a&amp;b \\ c&amp;d\end{matrix}$</li><li>向量：\mathbf{v} –&gt; $\mathbf{v}$</li></ul><h3 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h3><ul><li><p>常见函数：</p><p>  \sin(x) –&gt; $\sin(x)$</p><p>  \cos(x) –&gt; $\cos(x)$</p><p>  \log(x) –&gt; $\log(x)$</p><p>  \exp(x) –&gt; $\exp(x)$</p><p>  \log_2(x) –&gt; $\log_2(x)$</p></li></ul><h3 id="希腊字母："><a href="#希腊字母：" class="headerlink" title="希腊字母："></a>希腊字母：</h3><ul><li><p>\alpha –&gt; $\alpha$ $~~~~$ \Alpha –&gt; $A$</p></li><li><p>\beta –&gt; $\beta$ $~~~~$ \Beta –&gt; $B$</p></li><li><p>\gamma –&gt; $\gamma$ $~~~~$ \Gamma –&gt; $\Gamma$</p></li><li><p>\delta –&gt; $\delta$ $~~~~$ \Delta –&gt; $\Delta$</p></li><li><p>\epsilon –&gt; $\epsilon$ $~~~~$ \Epsilon –&gt; $E$</p></li><li><p>\zeta –&gt; $\zeta$ $~~~~$ \Zeta –&gt; $Z$</p></li><li><p>\eta –&gt; $\eta$ $~~~~$ \Eta –&gt; $H$</p></li><li><p>\theta –&gt; $\theta$ $~~~~$ \Theta –&gt; $\Theta$</p></li><li><p>\iota –&gt; $\iota$ $~~~~$ \Iota –&gt; $I$</p></li><li><p>\kappa –&gt; $\kappa$ $~~~~$ \k<br>Kappa –&gt; $K$</p></li><li><p>\lambda -&gt; $\lambda$ $~~~~$ \Lambda -&gt; $\Lambda$</p></li><li><p>\mu –&gt; $\mu$ $~~~~$ \Mu –&gt; $M$</p></li><li><p>\nu –&gt; $\nu$ $~~~~$ \Nu –&gt; $N$</p></li><li><p>\omicron –&gt; $\omicron$ $~~~~$ \Omicron –&gt; $O$</p></li><li><p>\xi –&gt; $\xi$ $~~~~$ \Xi –&gt; $\Xi$</p></li><li><p>\pi –&gt; $\pi$ $~~~~$ \Pi –&gt; $\Pi$</p></li><li><p>\rho –&gt; $\rho$ $~~~~$ \Rho –&gt; $P$</p></li><li><p>\sigma –&gt; $\sigma$ $~~~~$ \Sigma –&gt; $\Sigma$</p></li><li><p>\tau –&gt; $\tau$ $~~~~$ \Tau –&gt; $T$</p></li><li><p>\upsilon –&gt; $\upsilon$ $~~~~$ \Upsilon –&gt; $\Upsilon$</p></li><li><p>\phi –&gt; $\phi$ $~~~~$ \Phi –&gt; $\Phi$</p></li><li><p>\chi –&gt; $\chi$ $~~~~$ \Chi –&gt; $X$</p></li><li><p>\psi –&gt; $\psi$ $~~~~$ \Psi –&gt; $\Psi$</p></li><li><p>\omega –&gt; $\omega$ $~~~~$ \Omega –&gt; $\Omega$</p></li></ul><h3 id="符号："><a href="#符号：" class="headerlink" title="符号："></a>符号：</h3><ul><li>加号：+ –&gt; $+$</li><li>减号：- –&gt; $-$</li><li>乘号：\times –&gt; $\times$</li><li>除号：\div –&gt; $\div$</li><li>等于：&#x3D; –&gt; $&#x3D;$</li><li>不等于：\neq –&gt; $\neq$</li><li>大于：&gt; –&gt; $&gt;$</li><li>小于：&lt; –&gt; $&lt;$</li><li>大于等于：\geq –&gt; $\geq$</li><li>小于等于：\leq –&gt; $\leq$</li><li>等价号：\equiv –&gt; $\equiv$</li><li>约等于：\approx –&gt; $\approx$</li><li>正无穷：\infty –&gt; $\infty$</li><li>微分号：\partial –&gt; $\partial$</li></ul><h3 id="集合和逻辑运算："><a href="#集合和逻辑运算：" class="headerlink" title="集合和逻辑运算："></a>集合和逻辑运算：</h3><ul><li>空集：\emptyset –&gt; $\emptyset$</li><li>子集：\subset –&gt; $\subset$</li><li>并集：\cup –&gt; $\cup$</li><li>交集：\cap –&gt; $\cap$</li><li>包含于：\subseteq –&gt; $\subseteq$</li><li>逻辑与：\land -&gt; $\land$</li><li>逻辑或：\lor -&gt; $\lor$</li><li>逻辑非：\lnot -&gt; $\lnot$</li></ul><h3 id="矢量："><a href="#矢量：" class="headerlink" title="矢量："></a>矢量：</h3><ul><li>矢量箭头：\vec{a} –&gt; $\vec{a}$</li><li>点乘：\cdot -&gt; $\cdot$</li><li>叉乘：\times -&gt; $\times$</li><li>三点省略号：\ldots -&gt; $\ldots$</li></ul><h3 id="上划线和下划线："><a href="#上划线和下划线：" class="headerlink" title="上划线和下划线："></a>上划线和下划线：</h3><ul><li>上划线：\overline{a} –&gt; $\overline{a}$</li><li>下划线：\underline{a} –&gt; $\underline{a}$</li></ul><h3 id="括号："><a href="#括号：" class="headerlink" title="括号："></a>括号：</h3><ul><li>左括号：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y=</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">    ax^2+bx+c &amp; x&lt; 0</span><br><span class="line">    \</span><br><span class="line">    kx+d &amp; x \geq 0</span><br><span class="line">\end&#123;cases&#125;</span><br></pre></td></tr></table></figure>$$<br>  y&#x3D;<br>  \begin{cases}<br>  ax^2+bx+c &amp; x&lt; 0<br>  \\<br>  kx+d &amp; x \geq 0<br>  \end{cases}<br>$$</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown的基本语法</title>
      <link href="/2024/02/12/Post2/"/>
      <url>/2024/02/12/Post2/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/02/12/Post2/1.png"></p><span id="more"></span><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="标题-1"><a href="#标题-1" class="headerlink" title="标题"></a>标题</h2><p>用 # 号来表示 1-6 级标题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h1 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>用 * 和 _ 来表示字体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**粗体**</span><br><span class="line">***粗斜体***</span><br><span class="line"></span><br><span class="line">_斜体_</span><br><span class="line">__粗体__</span><br><span class="line">___粗斜体___</span><br></pre></td></tr></table></figure><p>示例：</p><p><em>斜体</em></p><p><strong>粗体</strong></p><p><em><strong>粗斜体</strong></em></p><p><em>斜体</em></p><p><strong>粗体</strong></p><p><em><strong>粗斜体</strong></em></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>用三个以上的 * - _ 来表示分隔线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br></pre></td></tr></table></figure><p>示例：</p><hr><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>用 ~~ 来表示删除线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p>示例：</p><p><del>删除线</del></p><h2 id="下滑线"><a href="#下滑线" class="headerlink" title="下滑线"></a>下滑线</h2><p>用 &lt; u &gt; &lt; &#x2F;u &gt; 来表示表示下划线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><p><u>下划线</u></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>用[^]来表示脚注</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文本[^脚注]</span><br><span class="line"></span><br><span class="line">[^脚注]:这是脚注</span><br></pre></td></tr></table></figure><p>示例：</p><p>文本<a href="%E8%BF%99%E6%98%AF%E8%84%9A%E6%B3%A8">^脚注</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>用 * + - 来表示无序列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure><p>示例：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>用 . 并加上数字来表示无有序列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><p>示例：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><p>在子列表中的选项前面加3个空格表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">   1. 第一节</span><br><span class="line">   2. 第二节</span><br><span class="line">1. 第二项</span><br><span class="line">   1. 第一节</span><br><span class="line">   2. 第二节</span><br><span class="line"></span><br><span class="line">* 第一项</span><br><span class="line">   * 第一节</span><br><span class="line">* 第二项</span><br><span class="line">   * 第一节</span><br></pre></td></tr></table></figure><p>示例：</p><ol><li>第一项<ol><li>第一节</li><li>第二节</li></ol></li><li>第二项<ol><li>第一节</li><li>第二节</li></ol></li></ol><ul><li>第一项<ul><li>第一节</li></ul></li><li>第二项<ul><li>第一节</li></ul></li></ul><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>用 &gt; 来表示区块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块</span><br></pre></td></tr></table></figure><p>示例：</p><blockquote><p>区块</p></blockquote><h2 id="区块嵌套"><a href="#区块嵌套" class="headerlink" title="区块嵌套"></a>区块嵌套</h2><p>用 &gt; 的数量来表示第几层嵌套</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 第一层</span><br><span class="line">&gt;&gt; 第二层</span><br><span class="line">&gt;&gt;&gt; 第三层</span><br></pre></td></tr></table></figure><p>示例：</p><blockquote><p>第一层</p><blockquote><p>第二层</p><blockquote><p>第三层</p></blockquote></blockquote></blockquote><h2 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h2><p>在列表前使用 &gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1. 第一项</span><br><span class="line">&gt; 2. 第二项</span><br><span class="line">&gt; 3. 第三项</span><br></pre></td></tr></table></figure><p>示例：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h2 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h2><p>在区块前使用列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">   &gt; 第一节</span><br><span class="line">2. 第二项</span><br><span class="line">   &gt; 第一节</span><br></pre></td></tr></table></figure><p>示例：</p><ol><li>第一项<blockquote><p>第一节</p></blockquote></li><li>第二项<blockquote><p>第一节</p></blockquote></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="片段代码"><a href="#片段代码" class="headerlink" title="片段代码"></a>片段代码</h2><p>用 &#96; 来表示代码片段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`printf(&quot;hello world&quot;);`</span><br></pre></td></tr></table></figure><p>示例：</p><p><code>printf(&quot;hello world&quot;);</code></p><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>用 ``` 来表示代码区块并可以指定语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`ˋ`c</span><br><span class="line">printf(&quot;hello world&quot;);</span><br><span class="line">`ˋ`</span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="文本链接"><a href="#文本链接" class="headerlink" title="文本链接"></a>文本链接</h2><p>用 [] 或者 &lt;&gt; 来表示需要被链接的文本，用 () 来提供链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[我的个人博客](https://cfn0324.github.io)</span><br></pre></td></tr></table></figure><p>示例：</p><p><a href="https://cfn0324.github.io/">我的个人博客</a></p><h2 id="直接链接"><a href="#直接链接" class="headerlink" title="直接链接"></a>直接链接</h2><p>用 &lt;&gt; 来直接使用链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://cfn0324.github.io&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><p><a href="https://cfn0324.github.io/">https://cfn0324.github.io</a></p><h2 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h2><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[我的个人博客][1]</span><br><span class="line"></span><br><span class="line">[1]:https://cfn0324.github.io</span><br></pre></td></tr></table></figure><p>示例：</p><p><a href="https://cfn0324.github.io/">我的个人博客</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="基本图片引用"><a href="#基本图片引用" class="headerlink" title="基本图片引用"></a>基本图片引用</h2><p>在链接格式前加一个 ! 表示图片()里面可以是路径也可以是网址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](Post2/1.png)</span><br></pre></td></tr></table></figure><p>示例：</p><p><img src="/2024/02/12/Post2/1.png" alt="图片"></p><h2 id="使用-img-标签"><a href="#使用-img-标签" class="headerlink" title="使用&lt; img &gt;标签"></a>使用&lt; img &gt;标签</h2><p>Markdown 还没有办法指定图片的高度与宽度，可以使用普通的 &lt; img &gt; 标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;Post2/1.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例：</p><img src="/2024/02/12/Post2/1.png" width="50%"><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="表格制作"><a href="#表格制作" class="headerlink" title="表格制作"></a>表格制作</h2><p>使用 | 和 - 来制作表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|表头|表头|</span><br><span class="line">|---|---|</span><br><span class="line">|单元格|单元格|</span><br><span class="line">|单元格|单元格|</span><br><span class="line">|单元格|单元格|</span><br></pre></td></tr></table></figure><p>示例：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h2 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h2><p>使用<code>-:</code>右对齐<br>使用<code>:-</code>左对齐<br>使用<code>:-:</code>居中对齐</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|左对齐|居中对齐|右对齐|</span><br><span class="line">|:-|:-:|-:|</span><br><span class="line">|单元格|单元格|单元格|</span><br><span class="line">|短|短|短|</span><br><span class="line">|长长长长|长长长长|长长长长|</span><br></pre></td></tr></table></figure><p>示例：</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="center">单元格</td><td align="right">单元格</td></tr><tr><td align="left">短</td><td align="center">短</td><td align="right">短</td></tr><tr><td align="left">长长长长</td><td align="center">长长长长</td><td align="right">长长长长</td></tr></tbody></table><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><h2 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h2><p><kbd>Ctrl</kbd>+<kbd>C</kbd>复制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>C<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>复制</span><br></pre></td></tr></table></figure><p><kbd>Ctrl</kbd>+<kbd>V</kbd>粘贴</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>V<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>粘贴</span><br></pre></td></tr></table></figure><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>以下这些符号前面加上反斜杠来帮助插入普通的符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><h2 id="latex数学公式"><a href="#latex数学公式" class="headerlink" title="latex数学公式"></a>latex数学公式</h2><p>用 $ 包含行内数学表达式</p><p>用 $$ 包含块内数学表达式</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span>1+1=2<span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">1+1=2</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>示例：</p><p>$1+1&#x3D;2$</p><p>$$<br>1+1&#x3D;2<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM算法之博弈论</title>
      <link href="/2024/02/12/Post1/"/>
      <url>/2024/02/12/Post1/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/02/12/Post1/1.jpeg"></p><span id="more"></span><h2 id="巴什博弈"><a href="#巴什博弈" class="headerlink" title="巴什博弈"></a>巴什博弈</h2><p>一堆n个物品，两个人轮流从中取出1~m个，最后取光者胜。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(n%(m+<span class="number">1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="威佐夫博弈"><a href="#威佐夫博弈" class="headerlink" title="威佐夫博弈"></a>威佐夫博弈</h2><p>两堆物品,两人轮流从一堆或者两堆中取相同1~不限个，最后取光者胜。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(x-y)*((<span class="built_in">sqrt</span>(<span class="number">5</span>)+<span class="number">1</span>)/<span class="number">2</span>)==<span class="built_in">min</span>(x,y))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="尼姆博弈"><a href="#尼姆博弈" class="headerlink" title="尼姆博弈"></a>尼姆博弈</h2><p>三堆物品，两人轮流取，每次取其中一堆1~不限个，最后取光者胜。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a^b^c==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="斐波那契博弈"><a href="#斐波那契博弈" class="headerlink" title="斐波那契博弈"></a>斐波那契博弈</h2><p>一堆物n个，两人轮流取，不能取完，不能取超过上次两倍，最后取光者胜。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">1</span>,c=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="type">int</span> d=c;</span><br><span class="line">    d=a+b;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">    c=d;</span><br><span class="line">    <span class="keyword">if</span>(c==n)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c&gt;n)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
