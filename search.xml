<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ACM算法之并查集</title>
      <link href="/2024/02/17/Post4/"/>
      <url>/2024/02/17/Post4/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/02/17/Post4/1.png"></p><span id="more"></span><h3 id="并查集是什么"><a href="#并查集是什么" class="headerlink" title="并查集是什么"></a>并查集是什么</h3><p>并查集是一种用来管理元素分组情况的数据结构。主要有以下两种用法：</p><ul><li>查询元素a和元素b是否在一组</li><li>合并元素a和元素b所在的组</li></ul><p>注意：并查集可以进行查询和合并操作，但是无法进行分割操作。</p><h3 id="并查集的结构"><a href="#并查集的结构" class="headerlink" title="并查集的结构"></a>并查集的结构</h3><p>并查集本质是树形结构，每个元素对应一个节点，每个组对应一棵树。在并查集中，那个节点是哪个节点的父亲以及树的形状等信息无需多加关注，整体组成一个树形结构才是重要的。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>准备 $n$ 个节点来表示 $n$ 个元素,最开始时边都是自己指向自己。故我们初始化这些节点</p><pre class="mermaid">graphid1(1)-->id1(1)id2(2)-->id2(2)id3(3)-->id3(3)id4(4)-->id4(4)id5(5)-->id5(5)id6(6)-->id6(6)</pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fa[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        fa[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>首先我们需要找到两个要合并的节点的根节点，并将其中的一个根节点指向另一个根节点。</p><p>一个节点指向另一个节点，就形成了一颗树，多个组就合并为一个组了。</p><pre class="mermaid">graph BT    id2(2)-->id1(1)    id3(3)-->id1(1)    id4(4)-->id5(5)    id5(5)-->id6(6)</pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==fa[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unite</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(x)]=fa[<span class="built_in">find</span>(y)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>为了查询两个节点是否同属一个组，我们需要沿着树往上走，找到树的根是谁。如果两个节点的根相同，那么就是同属于一个组。</p><p>在上图中，$1、2、3$ 的根都是 $1$ ,故 $1、2、3$ 为同一组，而 $4、5、6$ 的根都是 $6$ ，故 $4、5、6$ 为同一组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集的注意点"><a href="#并查集的注意点" class="headerlink" title="并查集的注意点"></a>并查集的注意点</h3><p>并查集作为一种树状结构，树状结构在一定情况下会退化成链表，会导致复杂度变得很大，所以我们要想办法避免退化的发生。</p><p>我们有两种方法来避免发生退化：</p><ol><li>使高度小的树向高度高的树合并。</li><li>使用路径压缩。</li></ol><h4 id="考虑高度的合并"><a href="#考虑高度的合并" class="headerlink" title="考虑高度的合并"></a>考虑高度的合并</h4><ol><li>首先我们记录每棵树的高度。</li><li>合并时，如果高度不同，我们让高度低的向高度高的合并。</li><li>如果高度相同，任意使一棵树指向另一棵树，并将被指的树，高度加一。</li></ol><p>下图就是考虑了高度的合并,我们只要加入rank数组，并将unite函数简单修改就能实现。</p><pre class="mermaid">graph BT    id2(2)-->id1(1)    id3(3)-->id1(1)    id4(4)-->id5(5)    id5(5)-->id6(6)</pre><pre class="mermaid">graph BT    id1(1)-->id6(6)    id2(2)-->id1(1)    id3(3)-->id1(1)    id4(4)-->id5(5)    id5(5)-->id6(6)</pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> rank[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unite</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(rank[x]&lt;rank[y])&#123;</span><br><span class="line">        fa[x]=fa[y];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        fa[y]=fa[x];</span><br><span class="line">        <span class="keyword">if</span>(rank[x]==rank[y])</span><br><span class="line">            rank[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路径压缩的合并"><a href="#路径压缩的合并" class="headerlink" title="路径压缩的合并"></a>路径压缩的合并</h4><p>对于每个节点，一旦向上走到了一次根节点，就把这个点到父亲的节点改为直接到到根的节点。故再次查询这些节点时，就可以很快知道根节点是谁了。在使用这简化方法时，可以不用考虑高度变化的合并也能保持很低的复杂度。</p><p>下图就是路径压缩的合并，我们只要对find函数进行简单修改即可。</p><pre class="mermaid">graph BT    id5(5)-->id4(4)    id4(4)-->id3(3)    id3(3)-->id2(2)    id2(2)-->id1(1)    id22(2)-->id11(1)    id33(3)-->id11(1)    id44(4)-->id11(1)    id55(5)-->id11(1)</pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==fa[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>加入两个优化的并查集的效率很高，对于 $n$ 个元素的并查集，一次操作的复杂度是 $O(\alpha(n))$ 。这里的 $\alpha(n)$ 是阿克曼(Ackermann)函数的反函数，比 $O(log(n))$ 还快。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="http://poj.org/problem?id=1182">食物链(POJ 1182)</a></p><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>动物王国中有三类动物 $A,B,C$ ，这三类动物的食物链构成了有趣的环形。 $A$ 吃 $B$ ，  $B$ 吃 $C$ ， $C$ 吃 $A$ 。<br>现有N个动物，以 $1－N$ 编号。每个动物都是 $A,B,C$ 中的一种，但是我们并不知道它到底是哪一种。</p><p>有人用两种说法对这 $N$ 个动物所构成的食物链关系进行描述：</p><p>第一种说法是 “$1$ $X$ $Y$” ，表示 $X$ 和 $Y$ 是同类。</p><p>第二种说法是 “$2$ $X$ $Y$” ，表示 $X$ 吃 $Y$ 。</p><p>此人对 $N$ 个动物，用上述两种说法，一句接一句地说出 $K$ 句话，这 $K$ 句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。</p><ol><li>当前的话与前面的某些真的话冲突，就是假话；</li><li>当前的话中X或 $Y$比 $N$ 大，就是假话；</li><li>当前的话表示 $X$ 吃 $X$ ，就是假话。<br>你的任务是根据给定的$N（1 \leq N \leq 50,000）$和 $K$ 句话$（0 \leq K \leq 100,000）$，输出假话的总数。</li></ol><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>第一行是两个整数 $N$ 和 $K$ ，以一个空格分隔。</p><p>以下 $K$ 行每行是三个正整数 $D，X，Y$，两数之间用一个空格隔开，其中 $D$ 表示说法的种类。</p><p>若 $D&#x3D;1$ ，则表示 $X$ 和 $Y$ 是同类。</p><p>若 $D&#x3D;2$ ，则表示 $X$ 吃 $Y$。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>只有一个整数，表示假话的数目。</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">100 7</span><br><span class="line">1 101 1 </span><br><span class="line">2 1 2</span><br><span class="line">2 2 3 </span><br><span class="line">2 3 3 </span><br><span class="line">1 1 3 </span><br><span class="line">2 3 1 </span><br><span class="line">1 5 5</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[<span class="number">150005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">3</span>;i++)&#123;</span><br><span class="line">        fa[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x)</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unite</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="built_in">find</span>(x);</span><br><span class="line">    <span class="type">int</span> b=<span class="built_in">find</span>(y);</span><br><span class="line">    fa[a]=fa[b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">init</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>((x&lt;<span class="number">1</span>)||(x&gt;n)||(y&lt;<span class="number">1</span>)||(y&gt;n))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y+n))||(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y+<span class="number">2</span>*n)))&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fa[<span class="built_in">find</span>(x)]=fa[<span class="built_in">find</span>(y)];</span><br><span class="line">                fa[<span class="built_in">find</span>(x+n)]=fa[<span class="built_in">find</span>(y+n)];</span><br><span class="line">                fa[<span class="built_in">find</span>(x+<span class="number">2</span>*n)]=fa[<span class="built_in">find</span>(y+<span class="number">2</span>*n)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))||(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y+<span class="number">2</span>*n)))&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fa[<span class="built_in">find</span>(x)]=fa[<span class="built_in">find</span>(y+n)];</span><br><span class="line">                fa[<span class="built_in">find</span>(x+n)]=fa[<span class="built_in">find</span>(y+<span class="number">2</span>*n)];</span><br><span class="line">                fa[<span class="built_in">find</span>(x+<span class="number">2</span>*n)]=fa[<span class="built_in">find</span>(y)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTex数学命令</title>
      <link href="/2024/02/17/Post3/"/>
      <url>/2024/02/17/Post3/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/02/17/Post3/1.jpeg"></p><span id="more"></span><h3 id="上下标："><a href="#上下标：" class="headerlink" title="上下标："></a>上下标：</h3><ul><li>上标： x^1 –&gt; $x^1$</li><li>下标： x_1 –&gt; $x_1$</li></ul><h3 id="分式："><a href="#分式：" class="headerlink" title="分式："></a>分式：</h3><ul><li>行内分式：\frac{a}{b} –&gt; $\frac{a}{b}$</li><li>行间分式：\dfrac{a}{b} –&gt; $\dfrac{a}{b}$</li></ul><h3 id="根号："><a href="#根号：" class="headerlink" title="根号："></a>根号：</h3><ul><li>平方根：\sqrt{x} –&gt; $\sqrt{x}$</li><li>$n$ 次方根：\sqrt[n]{x} –&gt; $\sqrt[n]{x}$</li></ul><h3 id="求和、积分、极限："><a href="#求和、积分、极限：" class="headerlink" title="求和、积分、极限："></a>求和、积分、极限：</h3><ul><li>求和：\sum_{i&#x3D;1}^{n}a_i –&gt; $\sum_{i&#x3D;1}^{n}a_i$</li><li>积分：\int_{a}^{b}f(x)dx –&gt; $\int_{a}^{b}f(x)dx$</li><li>极限：\lim_{x\to\infty} –&gt; $\lim_{x\to\infty}$</li></ul><h3 id="矩阵、向量："><a href="#矩阵、向量：" class="headerlink" title="矩阵、向量："></a>矩阵、向量：</h3><ul><li>矩阵：\\begin{matrix}a&amp;b\\c&amp;d\end{matrix} –&gt; $\begin{matrix}a&amp;b \\ c&amp;d\end{matrix}$</li><li>向量：\mathbf{v} –&gt; $\mathbf{v}$</li></ul><h3 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h3><ul><li><p>常见函数：</p><p>  \sin(x) –&gt; $\sin(x)$</p><p>  \cos(x) –&gt; $\cos(x)$</p><p>  \log(x) –&gt; $\log(x)$</p><p>  \exp(x) –&gt; $\exp(x)$</p><p>  \log_2(x) –&gt; $\log_2(x)$</p></li></ul><h3 id="希腊字母："><a href="#希腊字母：" class="headerlink" title="希腊字母："></a>希腊字母：</h3><ul><li><p>\alpha –&gt; $\alpha$ $~~~~$ \Alpha –&gt; $A$</p></li><li><p>\beta –&gt; $\beta$ $~~~~$ \Beta –&gt; $B$</p></li><li><p>\gamma –&gt; $\gamma$ $~~~~$ \Gamma –&gt; $\Gamma$</p></li><li><p>\delta –&gt; $\delta$ $~~~~$ \Delta –&gt; $\Delta$</p></li><li><p>\epsilon –&gt; $\epsilon$ $~~~~$ \Epsilon –&gt; $E$</p></li><li><p>\zeta –&gt; $\zeta$ $~~~~$ \Zeta –&gt; $Z$</p></li><li><p>\eta –&gt; $\eta$ $~~~~$ \Eta –&gt; $H$</p></li><li><p>\theta –&gt; $\theta$ $~~~~$ \Theta –&gt; $\Theta$</p></li><li><p>\iota –&gt; $\iota$ $~~~~$ \Iota –&gt; $I$</p></li><li><p>\kappa –&gt; $\kappa$ $~~~~$ \k<br>Kappa –&gt; $K$</p></li><li><p>\lambda -&gt; $\lambda$ $~~~~$ \Lambda -&gt; $\Lambda$</p></li><li><p>\mu –&gt; $\mu$ $~~~~$ \Mu –&gt; $M$</p></li><li><p>\nu –&gt; $\nu$ $~~~~$ \Nu –&gt; $N$</p></li><li><p>\omicron –&gt; $\omicron$ $~~~~$ \Omicron –&gt; $O$</p></li><li><p>\xi –&gt; $\xi$ $~~~~$ \Xi –&gt; $\Xi$</p></li><li><p>\pi –&gt; $\pi$ $~~~~$ \Pi –&gt; $\Pi$</p></li><li><p>\rho –&gt; $\rho$ $~~~~$ \Rho –&gt; $P$</p></li><li><p>\sigma –&gt; $\sigma$ $~~~~$ \Sigma –&gt; $\Sigma$</p></li><li><p>\tau –&gt; $\tau$ $~~~~$ \Tau –&gt; $T$</p></li><li><p>\upsilon –&gt; $\upsilon$ $~~~~$ \Upsilon –&gt; $\Upsilon$</p></li><li><p>\phi –&gt; $\phi$ $~~~~$ \Phi –&gt; $\Phi$</p></li><li><p>\chi –&gt; $\chi$ $~~~~$ \Chi –&gt; $X$</p></li><li><p>\psi –&gt; $\psi$ $~~~~$ \Psi –&gt; $\Psi$</p></li><li><p>\omega –&gt; $\omega$ $~~~~$ \Omega –&gt; $\Omega$</p></li></ul><h3 id="符号："><a href="#符号：" class="headerlink" title="符号："></a>符号：</h3><ul><li>加号：+ –&gt; $+$</li><li>减号：- –&gt; $-$</li><li>乘号：\times –&gt; $\times$</li><li>除号：\div –&gt; $\div$</li><li>等于：&#x3D; –&gt; $&#x3D;$</li><li>不等于：\neq –&gt; $\neq$</li><li>大于：&gt; –&gt; $&gt;$</li><li>小于：&lt; –&gt; $&lt;$</li><li>大于等于：\geq –&gt; $\geq$</li><li>小于等于：\leq –&gt; $\leq$</li><li>等价号：\equiv –&gt; $\equiv$</li><li>约等于：\approx –&gt; $\approx$</li><li>正无穷：\infty –&gt; $\infty$</li><li>微分号：\partial –&gt; $\partial$</li></ul><h3 id="集合和逻辑运算："><a href="#集合和逻辑运算：" class="headerlink" title="集合和逻辑运算："></a>集合和逻辑运算：</h3><ul><li>空集：\emptyset –&gt; $\emptyset$</li><li>子集：\subset –&gt; $\subset$</li><li>并集：\cup –&gt; $\cup$</li><li>交集：\cap –&gt; $\cap$</li><li>包含于：\subseteq –&gt; $\subseteq$</li><li>逻辑与：\land -&gt; $\land$</li><li>逻辑或：\lor -&gt; $\lor$</li><li>逻辑非：\lnot -&gt; $\lnot$</li></ul><h3 id="矢量："><a href="#矢量：" class="headerlink" title="矢量："></a>矢量：</h3><ul><li>矢量箭头：\vec{a} –&gt; $\vec{a}$</li><li>点乘：\cdot -&gt; $\cdot$</li><li>叉乘：\times -&gt; $\times$</li><li>三点省略号：\ldots -&gt; $\ldots$</li></ul><h3 id="上划线和下划线："><a href="#上划线和下划线：" class="headerlink" title="上划线和下划线："></a>上划线和下划线：</h3><ul><li>上划线：\overline{a} –&gt; $\overline{a}$</li><li>下划线：\underline{a} –&gt; $\underline{a}$</li></ul><h3 id="括号："><a href="#括号：" class="headerlink" title="括号："></a>括号：</h3><ul><li>左括号：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y=</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">    ax^2+bx+c &amp; x&lt; 0</span><br><span class="line">    \</span><br><span class="line">    kx+d &amp; x \geq 0</span><br><span class="line">\end&#123;cases&#125;</span><br></pre></td></tr></table></figure>$$<br>  y&#x3D;<br>  \begin{cases}<br>  ax^2+bx+c &amp; x&lt; 0<br>  \\<br>  kx+d &amp; x \geq 0<br>  \end{cases}<br>$$</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown的基本语法</title>
      <link href="/2024/02/12/Post2/"/>
      <url>/2024/02/12/Post2/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/02/12/Post2/1.png"></p><span id="more"></span><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="标题-1"><a href="#标题-1" class="headerlink" title="标题"></a>标题</h2><p>用 # 号来表示 1-6 级标题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h1 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>用 * 和 _ 来表示字体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**粗体**</span><br><span class="line">***粗斜体***</span><br><span class="line"></span><br><span class="line">_斜体_</span><br><span class="line">__粗体__</span><br><span class="line">___粗斜体___</span><br></pre></td></tr></table></figure><p>示例：</p><p><em>斜体</em></p><p><strong>粗体</strong></p><p><em><strong>粗斜体</strong></em></p><p><em>斜体</em></p><p><strong>粗体</strong></p><p><em><strong>粗斜体</strong></em></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>用三个以上的 * - _ 来表示分隔线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br></pre></td></tr></table></figure><p>示例：</p><hr><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>用 ~~ 来表示删除线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p>示例：</p><p><del>删除线</del></p><h2 id="下滑线"><a href="#下滑线" class="headerlink" title="下滑线"></a>下滑线</h2><p>用 &lt; u &gt; &lt; &#x2F;u &gt; 来表示表示下划线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><p><u>下划线</u></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>用[^]来表示脚注</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文本[^脚注]</span><br><span class="line"></span><br><span class="line">[^脚注]:这是脚注</span><br></pre></td></tr></table></figure><p>示例：</p><p>文本<a href="%E8%BF%99%E6%98%AF%E8%84%9A%E6%B3%A8">^脚注</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>用 * + - 来表示无序列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure><p>示例：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>用 . 并加上数字来表示无有序列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><p>示例：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><p>在子列表中的选项前面加3个空格表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">   1. 第一节</span><br><span class="line">   2. 第二节</span><br><span class="line">1. 第二项</span><br><span class="line">   1. 第一节</span><br><span class="line">   2. 第二节</span><br><span class="line"></span><br><span class="line">* 第一项</span><br><span class="line">   * 第一节</span><br><span class="line">* 第二项</span><br><span class="line">   * 第一节</span><br></pre></td></tr></table></figure><p>示例：</p><ol><li>第一项<ol><li>第一节</li><li>第二节</li></ol></li><li>第二项<ol><li>第一节</li><li>第二节</li></ol></li></ol><ul><li>第一项<ul><li>第一节</li></ul></li><li>第二项<ul><li>第一节</li></ul></li></ul><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>用 &gt; 来表示区块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块</span><br></pre></td></tr></table></figure><p>示例：</p><blockquote><p>区块</p></blockquote><h2 id="区块嵌套"><a href="#区块嵌套" class="headerlink" title="区块嵌套"></a>区块嵌套</h2><p>用 &gt; 的数量来表示第几层嵌套</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 第一层</span><br><span class="line">&gt;&gt; 第二层</span><br><span class="line">&gt;&gt;&gt; 第三层</span><br></pre></td></tr></table></figure><p>示例：</p><blockquote><p>第一层</p><blockquote><p>第二层</p><blockquote><p>第三层</p></blockquote></blockquote></blockquote><h2 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h2><p>在列表前使用 &gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1. 第一项</span><br><span class="line">&gt; 2. 第二项</span><br><span class="line">&gt; 3. 第三项</span><br></pre></td></tr></table></figure><p>示例：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h2 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h2><p>在区块前使用列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">   &gt; 第一节</span><br><span class="line">2. 第二项</span><br><span class="line">   &gt; 第一节</span><br></pre></td></tr></table></figure><p>示例：</p><ol><li>第一项<blockquote><p>第一节</p></blockquote></li><li>第二项<blockquote><p>第一节</p></blockquote></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="片段代码"><a href="#片段代码" class="headerlink" title="片段代码"></a>片段代码</h2><p>用 &#96; 来表示代码片段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`printf(&quot;hello world&quot;);`</span><br></pre></td></tr></table></figure><p>示例：</p><p><code>printf(&quot;hello world&quot;);</code></p><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>用 ``` 来表示代码区块并可以指定语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`ˋ`c</span><br><span class="line">printf(&quot;hello world&quot;);</span><br><span class="line">`ˋ`</span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="文本链接"><a href="#文本链接" class="headerlink" title="文本链接"></a>文本链接</h2><p>用 [] 或者 &lt;&gt; 来表示需要被链接的文本，用 () 来提供链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[我的个人博客](https://cfn0324.github.io)</span><br></pre></td></tr></table></figure><p>示例：</p><p><a href="https://cfn0324.github.io/">我的个人博客</a></p><h2 id="直接链接"><a href="#直接链接" class="headerlink" title="直接链接"></a>直接链接</h2><p>用 &lt;&gt; 来直接使用链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://cfn0324.github.io&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><p><a href="https://cfn0324.github.io/">https://cfn0324.github.io</a></p><h2 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h2><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[我的个人博客][1]</span><br><span class="line"></span><br><span class="line">[1]:https://cfn0324.github.io</span><br></pre></td></tr></table></figure><p>示例：</p><p><a href="https://cfn0324.github.io/">我的个人博客</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="基本图片引用"><a href="#基本图片引用" class="headerlink" title="基本图片引用"></a>基本图片引用</h2><p>在链接格式前加一个 ! 表示图片()里面可以是路径也可以是网址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](Post2/1.png)</span><br></pre></td></tr></table></figure><p>示例：</p><p><img src="/2024/02/12/Post2/1.png" alt="图片"></p><h2 id="使用-img-标签"><a href="#使用-img-标签" class="headerlink" title="使用&lt; img &gt;标签"></a>使用&lt; img &gt;标签</h2><p>Markdown 还没有办法指定图片的高度与宽度，可以使用普通的 &lt; img &gt; 标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;Post2/1.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例：</p><img src="/2024/02/12/Post2/1.png" width="50%"><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="表格制作"><a href="#表格制作" class="headerlink" title="表格制作"></a>表格制作</h2><p>使用 | 和 - 来制作表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|表头|表头|</span><br><span class="line">|---|---|</span><br><span class="line">|单元格|单元格|</span><br><span class="line">|单元格|单元格|</span><br><span class="line">|单元格|单元格|</span><br></pre></td></tr></table></figure><p>示例：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h2 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h2><p>使用<code>-:</code>右对齐<br>使用<code>:-</code>左对齐<br>使用<code>:-:</code>居中对齐</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|左对齐|居中对齐|右对齐|</span><br><span class="line">|:-|:-:|-:|</span><br><span class="line">|单元格|单元格|单元格|</span><br><span class="line">|短|短|短|</span><br><span class="line">|长长长长|长长长长|长长长长|</span><br></pre></td></tr></table></figure><p>示例：</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="center">单元格</td><td align="right">单元格</td></tr><tr><td align="left">短</td><td align="center">短</td><td align="right">短</td></tr><tr><td align="left">长长长长</td><td align="center">长长长长</td><td align="right">长长长长</td></tr></tbody></table><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><h2 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h2><p><kbd>Ctrl</kbd>+<kbd>C</kbd>复制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>C<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>复制</span><br></pre></td></tr></table></figure><p><kbd>Ctrl</kbd>+<kbd>V</kbd>粘贴</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>V<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>粘贴</span><br></pre></td></tr></table></figure><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>以下这些符号前面加上反斜杠来帮助插入普通的符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><h2 id="latex数学公式"><a href="#latex数学公式" class="headerlink" title="latex数学公式"></a>latex数学公式</h2><p>用 $ 包含行内数学表达式</p><p>用 $$ 包含块内数学表达式</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span>1+1=2<span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">1+1=2</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>示例：</p><p>$1+1&#x3D;2$</p><p>$$<br>1+1&#x3D;2<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM算法之博弈论</title>
      <link href="/2024/02/12/Post1/"/>
      <url>/2024/02/12/Post1/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/02/12/Post1/1.jpeg"></p><span id="more"></span><h2 id="巴什博弈"><a href="#巴什博弈" class="headerlink" title="巴什博弈"></a>巴什博弈</h2><p>一堆n个物品，两个人轮流从中取出1~m个，最后取光者胜。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(n%(m+<span class="number">1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="威佐夫博弈"><a href="#威佐夫博弈" class="headerlink" title="威佐夫博弈"></a>威佐夫博弈</h2><p>两堆物品,两人轮流从一堆或者两堆中取相同1~不限个，最后取光者胜。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(x-y)*((<span class="built_in">sqrt</span>(<span class="number">5</span>)+<span class="number">1</span>)/<span class="number">2</span>)==<span class="built_in">min</span>(x,y))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="尼姆博弈"><a href="#尼姆博弈" class="headerlink" title="尼姆博弈"></a>尼姆博弈</h2><p>三堆物品，两人轮流取，每次取其中一堆1~不限个，最后取光者胜。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a^b^c==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="斐波那契博弈"><a href="#斐波那契博弈" class="headerlink" title="斐波那契博弈"></a>斐波那契博弈</h2><p>一堆物n个，两人轮流取，不能取完，不能取超过上次两倍，最后取光者胜。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">1</span>,c=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="type">int</span> d=c;</span><br><span class="line">    d=a+b;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">    c=d;</span><br><span class="line">    <span class="keyword">if</span>(c==n)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c&gt;n)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
